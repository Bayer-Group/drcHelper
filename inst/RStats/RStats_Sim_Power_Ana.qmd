---
title: "Simulation Based Power Analysis"
description: | 
  Collection of Notes on MM
date: December 4, 2024
author:
  - first_name: "Zhenglei"
    last_name: "Gao"
    url: https://github.com/Zhenglei-BCS
    affiliation: Bayer AG
    affiliation_url: https://bayer.com
    orcid_id: 0000-0002-4042-310X
editor_options: 
  chunk_output_type: console
---


```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
library(tidyverse)
```

```{r}
library(drcHelper)
```


```{r}
source("~/Projects/drcHelper/inst/RStats/RStats_broom_tests.R")
source("~/Projects/drcHelper/R/wiiliams_JT.R")

# Generate example data
set.seed(123)
test_data <- simulate_dose_response(
  n_doses = 5,
  dose_range = c(0, 20),
  m_tanks = 3,
  k_individuals = 10,
  var_tank = 4,
  var_individual = 2,
  include_individuals = TRUE,
  response_function = function(dose) 100 - dose * 2  # Decreasing trend
)
# Plot individual data points with tank means
ggplot(test_data, aes(x = factor(Dose), y = Response, color = factor(Tank))) +
  geom_jitter(width = 0.2, alpha = 0.5) +
  stat_summary(fun = mean, geom = "point", size = 3) +
  stat_summary(fun = mean, geom = "line", aes(group = factor(Tank))) +
  labs(title = "Dose-Response Data with Hierarchical Structure",
       x = "Dose", y = "Response",
       color = "Tank") +
  theme_minimal()
agg_data <- stats::aggregate(Response ~ Dose + Tank, data = test_data, FUN = mean)
# Ensure Dose is a factor
agg_data$Dose <- as.factor(agg_data$Dose)
prelimPlot3(agg_data)
# Run different tests
result_lmm_homo <- lmm_dunnett_homo(test_data, alternative = "less")
result_lmm_hetero <- lmm_dunnett_hetero(test_data, alternative = "less")
result_lm_hetero <- gls_dunnett_agg(test_data, alternative = "less")
result_lm_homo <- lm_dunnett_agg(test_data, alternative = "less")
result_williams <- williams_test(test_data, alternative = "less")
result_jt <- jonckheere_test(test_data, alternative = "less")
result_wilcox <- manyone_wilcox_test(test_data,alternative ="greater",p.adjust.method="holm")
result_dunn <- manyone_dunns_test(test_data,alternative ="less",p.adjust.method="holm")
# Compare p-values

P_Values = data.frame(lmm_homo= result_lmm_homo$p_values, 
                      lmm_hetero= result_lmm_hetero$p_values,
                      lm_homo = result_lm_homo$p_values,
                      lm_hetero = result_lm_hetero$p_values,
                      williams=result_williams$p_values,
                      Jonckheere_Terpstra = result_jt$p_values,
                      dunn = result_dunn$p_values,
                      wilcox = result_wilcox$p_values
                      )

```




## Discussion Outcome

Thanks for sharing your `simulate_dose_response` function. This gives me a good starting point for generating dose-response data for testing and power analysis.

Let me now help you develop the `combine_multiple_comparisons` function and refine the existing functions to make them work together seamlessly. I'll also set up a framework for simulation-based power analysis.

First, let's develop the `combine_multiple_comparisons` function:

```{r}
#' Combine Multiple Comparison Test Results for Dose-Response Analysis
#'
#' This function applies various multiple comparison methods to dose-response data
#' and returns the results in a standardized format for easy comparison.
#'
#' @param data A data frame containing the dose-response data
#' @param response The name of the response variable
#' @param dose The name of the dose variable
#' @param group An optional grouping variable name
#' @param control The dose level to use as control (default: 0)
#' @param alternative Direction of the alternative hypothesis ("two.sided", "less", or "greater")
#' @param conf.level Confidence level for intervals
#' @param methods Vector of method names to apply. Available methods include:
#'   "Dunnett_multcomp", "Dunnett_DescTools", "Dunnett_PMCMRplus",
#'   "Williams_PMCMRplus", "Williams_JG", "stepDown_PMCMR"
#'
#' @return A tibble containing the combined results from all specified methods
#' @export
#'
#' @importFrom dplyr bind_rows
#' @importFrom stats aov as.formula
#' @importFrom tibble tibble
combine_multiple_comparisons <- function(data, response, dose, group = NULL,
                                        control = 0, alternative = "two.sided",
                                        conf.level = 0.95,
                                        methods = c("Dunnett_multcomp", "Williams_PMCMRplus")) {
  
  # Check inputs
  if (!is.data.frame(data)) {
    stop("'data' must be a data frame")
  }
  
  if (!response %in% names(data)) {
    stop("'response' variable not found in data")
  }
  
  if (!dose %in% names(data)) {
    stop("'dose' variable not found in data")
  }
  
  if (!is.null(group) && !group %in% names(data)) {
    stop("'group' variable not found in data")
  }
  
  # Ensure dose is treated as a factor
  data[[dose]] <- as.factor(data[[dose]])
  
  # Find the control level index
  dose_levels <- levels(data[[dose]])
  control_idx <- which(dose_levels == as.character(control))
  
  if (length(control_idx) == 0) {
    stop("Control dose level not found in data")
  }
  
  # Create formula based on whether a grouping variable is provided
  if (is.null(group)) {
    formula <- as.formula(paste(response, "~", dose))
  } else {
    formula <- as.formula(paste(response, "~", dose, "+", group))
  }
  
  # Fit ANOVA model
  aov_model <- aov(formula, data = data)
  
  # Initialize results list
  results_list <- list()
  
  # Apply each requested method
  for (method in methods) {
    if (grepl("^Dunnett", method)) {
      dunnett_method <- gsub("^Dunnett_", "", method)
      method_name <- paste0("Dunnett_", dunnett_method)
      
      # Apply Dunnett test with the appropriate method
      result <- broom_dunnett(
        aov_model, 
        method = method_name,
        control = control_idx,
        alternative = alternative,
        conf.level = conf.level
      )
      
    } else if (grepl("^Williams", method)) {
      williams_method <- gsub("^Williams_", "", method)
      method_name <- paste0("Williams_", williams_method)
      
      # Apply Williams test with the appropriate method
      result <- broom_williams(
        aov_model, 
        method = method_name,
        control = control_idx,
        alternative = alternative,
        conf.level = conf.level
      )
      
    } else if (method == "stepDown_PMCMR") {
      # Apply step-down test from PMCMR package
      result <- try({
        sd_test <- PMCMR::stepDownTrendTest(data[[response]], data[[dose]])
        tibble::tibble(
          comparison = paste(names(sd_test$p.value), "- control"),
          estimate = NA_real_,  # Step-down test doesn't provide estimates
          p.value = sd_test$p.value,
          conf.low = NA_real_,  # Step-down test doesn't provide confidence intervals
          conf.high = NA_real_,
          method = "stepDown_PMCMR"
        )
      }, silent = TRUE)
      
      if (inherits(result, "try-error")) {
        warning("Step-down test failed. Error: ", attr(result, "condition")$message)
        result <- tibble::tibble(
          comparison = character(),
          estimate = numeric(),
          p.value = numeric(),
          conf.low = numeric(),
          conf.high = numeric(),
          method = character()
        )
      }
    } else {
      warning("Unknown method: ", method)
      next
    }
    
    # Add to results list
    results_list[[method]] <- result
  }
  
  # Combine all results
  combined_results <- dplyr::bind_rows(results_list)
  
  # Add dose information to make results more interpretable
  combined_results <- combined_results %>%
    dplyr::mutate(
      dose_level = sub(".*?([0-9.]+).*", "\\1", comparison),
      control_level = as.character(control)
    )
  
  return(combined_results)
}
```

Now, let's add the `williamsTest_JG` function that was referenced in your `broom_williams` function:

```{r}
#' Williams Test Implementation (Jones-Graul Method)
#'
#' This function implements the Williams test for monotonic dose-response relationships
#' using the Jones-Graul method.
#'
#' @param x An object of class formula, aov, lm, or a data frame or matrix
#' @param ... Additional arguments passed to methods
#'
#' @return A data frame with standardized output columns
#' @export
williamsTest_JG <- function(x, ...) {
  UseMethod("williamsTest_JG")
}

#' @export
williamsTest_JG.formula <- function(formula, data, ...) {
  model <- aov(formula, data = data)
  williamsTest_JG(model, ...)
}

#' @export
williamsTest_JG.aov <- function(x, control = 1, alternative = c("greater", "less", "two.sided"),
                               conf.level = 0.95, ...) {
  alternative <- match.arg(alternative)
  
  # Extract data from the model
  model_data <- model.frame(x)
  response_var <- model_data[, 1]
  factor_var <- model_data[, 2]
  
  # Get group means and sample sizes
  group_means <- tapply(response_var, factor_var, mean)
  group_sizes <- tapply(response_var, factor_var, length)
  
  # Get residual variance from ANOVA
  residual_var <- summary(x)[[1]]["Residuals", "Mean Sq"]
  
  # Number of groups
  k <- length(group_means)
  
  if (control < 1 || control > k) {
    stop("Control group index must be between 1 and k")
  }
  
  # Calculate isotonic means (step-down approach)
  isotonic_means <- numeric(k)
  isotonic_means[control] <- group_means[control]
  
  # For doses higher than control
  if (control < k) {
    for (i in (control + 1):k) {
      # Pool means if current mean is less than previous isotonic mean
      if (i == control + 1) {
        isotonic_means[i] <- max(group_means[i], group_means[control])
      } else {
        isotonic_means[i] <- max(group_means[i], isotonic_means[i - 1])
      }
    }
  }
  
  # For doses lower than control (if any)
  if (control > 1) {
    for (i in (control - 1):1) {
      # Pool means if current mean is greater than next isotonic mean
      if (i == control - 1) {
        isotonic_means[i] <- min(group_means[i], group_means[control])
      } else {
        isotonic_means[i] <- min(group_means[i], isotonic_means[i + 1])
      }
    }
  }
  
  # Calculate test statistics
  t_stats <- numeric(k - 1)
  comparisons <- character(k - 1)
  estimates <- numeric(k - 1)
  p_values <- numeric(k - 1)
  conf_low <- numeric(k - 1)
  conf_high <- numeric(k - 1)
  
  idx <- 1
  for (i in setdiff(1:k, control)) {
    # Calculate contrast weights
    weights <- rep(0, k)
    weights[control] <- -1
    weights[i] <- 1
    
    # Calculate contrast
    contrast <- sum(weights * isotonic_means)
    
    # Calculate standard error
    se <- sqrt(residual_var * sum(weights^2 / group_sizes))
    
    # Calculate t-statistic
    t_stat <- contrast / se
    t_stats[idx] <- t_stat
    
    # Calculate p-value based on alternative
    if (alternative == "two.sided") {
      p_value <- 2 * pt(-abs(t_stat), df = x$df.residual)
    } else if (alternative == "greater") {
      p_value <- pt(-t_stat, df = x$df.residual)
    } else {
      p_value <- pt(t_stat, df = x$df.residual)
    }
    
    # Calculate confidence intervals
    t_crit <- qt(1 - (1 - conf.level) / 2, df = x$df.residual)
    margin <- t_crit * se
    
    # Store results
    group_levels <- levels(factor_var)
    comparisons[idx] <- paste(group_levels[i], "-", group_levels[control])
    estimates[idx] <- contrast
    p_values[idx] <- p_value
    conf_low[idx] <- contrast - margin
    conf_high[idx] <- contrast + margin
    
    idx <- idx + 1
  }
  
  # Create result data frame
  result <- tibble::tibble(
    comparison = comparisons,
    estimate = estimates,
    p.value = p_values,
    conf.low = conf_low,
    conf.high = conf_high,
    method = "Williams_JG"
  )
  
  return(result)
}

#' @export
williamsTest_JG.default <- function(x, g, control = 1, ...) {
  # Convert to formula interface
  df <- data.frame(response = x, group = factor(g))
  williamsTest_JG(response ~ group, data = df, control = control, ...)
}
```

Now, let's create a function for simulation-based power analysis:

```{r}
#' Perform Simulation-Based Power Analysis for Dose-Response Tests
#'
#' This function conducts a simulation-based power analysis for various multiple
#' comparison methods in dose-response analysis.
#'
#' @param n_sims Number of simulations to run
#' @param n_doses Number of dose levels
#' @param dose_range Vector of length 2 specifying the min and max dose values
#' @param m_tanks Number of tanks per dose
#' @param k_individuals Number of individuals per tank
#' @param var_tank Variance at the tank level
#' @param var_individual Variance at the individual level
#' @param response_function Function that calculates the response given a dose
#' @param alpha Significance level for hypothesis tests
#' @param methods Vector of method names to compare
#' @param include_individuals Whether to simulate individual-level data
#' @param ... Additional parameters passed to response_function
#'
#' @return A tibble containing power analysis results for each method and dose level
#' @export
#'
#' @importFrom dplyr bind_rows group_by summarize
#' @importFrom purrr map_dfr
#' @importFrom tibble tibble
power_analysis_dose_response <- function(n_sims = 100,
                                        n_doses = 5,
                                        dose_range = c(0, 20),
                                        m_tanks = 3,
                                        k_individuals = 10,
                                        var_tank = 4,
                                        var_individual = 2,
                                        response_function = NULL,
                                        alpha = 0.05,
                                        methods = c("Dunnett_multcomp", "Williams_PMCMRplus"),
                                        include_individuals = TRUE,
                                        ...) {
  
  # Set default response function if not provided
  if (is.null(response_function)) {
    response_function <- function(dose, lower = 0, upper = 100, ED50 = 10, slope = 1) {
      lower + (upper - lower) / (1 + exp(-slope * (dose - ED50)))
    }
  }
  
  # Function to run a single simulation
  run_simulation <- function(sim_id) {
    # Generate data
    sim_data <- simulate_dose_response(
      n_doses = n_doses,
      dose_range = dose_range,
      m_tanks = m_tanks,
      k_individuals = k_individuals,
      var_tank = var_tank,
      var_individual = var_individual,
      include_individuals = include_individuals,
      response_function = response_function,
      ...
    )
    
    # If we have individual-level data, aggregate to tank level
    if (include_individuals) {
      sim_data <- sim_data %>%
        dplyr::group_by(Dose, Tank) %>%
        dplyr::summarize(Response = mean(Response), .groups = "drop")
    }
    
    # Run multiple comparison tests
    test_results <- try({
      combine_multiple_comparisons(
        data = sim_data,
        response = "Response",
        dose = "Dose",
        control = min(sim_data$Dose),
        alternative = "two.sided",
        conf.level = 1 - alpha,
        methods = methods
      )
    }, silent = TRUE)
    
    if (inherits(test_results, "try-error")) {
      warning("Error in simulation ", sim_id, ": ", attr(test_results, "condition")$message)
      return(NULL)
    }
    
    # Add simulation ID
    test_results$simulation <- sim_id
    
    return(test_results)
  }
  
  # Run all simulations
  message("Running ", n_sims, " simulations...")
  all_results <- purrr::map_dfr(1:n_sims, run_simulation)
  
  # Calculate power for each method and dose level
  if (nrow(all_results) > 0) {
    power_results <- all_results %>%
      dplyr::group_by(method, comparison) %>%
      dplyr::summarize(
        n_significant = sum(p.value < alpha, na.rm = TRUE),
        n_tests = sum(!is.na(p.value)),
        power = n_significant / n_tests,
        mean_estimate = mean(estimate, na.rm = TRUE),
        sd_estimate = sd(estimate, na.rm = TRUE),
        .groups = "drop"
      )
    
    return(power_results)
  } else {
    warning("No valid results from simulations")
    return(tibble::tibble(
      method = character(),
      comparison = character(),
      n_significant = integer(),
      n_tests = integer(),
      power = numeric(),
      mean_estimate = numeric(),
      sd_estimate = numeric()
    ))
  }
}
```

Let's also create a visualization function to help interpret the power analysis results:

```{r}
#' Visualize Power Analysis Results for Dose-Response Tests
#'
#' This function creates visualizations of power analysis results from
#' multiple comparison methods in dose-response analysis.
#'
#' @param power_results A tibble containing power analysis results from power_analysis_dose_response
#' @param plot_type Type of plot to create: "power" (default), "estimates", or "both"
#' @param arrange_by How to arrange facets: "method" (default) or "dose"
#'
#' @return A ggplot2 object
#' @export
#'
#' @importFrom ggplot2 ggplot aes geom_point geom_line facet_wrap theme_minimal labs
#' @importFrom dplyr mutate
#' @importFrom tidyr extract
visualize_power_analysis <- function(power_results, 
                                    plot_type = c("power", "estimates", "both"),
                                    arrange_by = c("method", "dose")) {
  
  plot_type <- match.arg(plot_type)
  arrange_by <- match.arg(arrange_by)
  
  # Extract dose levels from comparison strings
  power_results <- power_results %>%
    tidyr::extract(comparison, 
                  into = c("dose_level", "control_level"),
                  regex = "([0-9.]+) - ([0-9.]+)",
                  remove = FALSE,
                  convert = TRUE)
  
  if (plot_type == "power" || plot_type == "both") {
    # Create power plot
    power_plot <- ggplot2::ggplot(power_results, ggplot2::aes(x = dose_level, y = power, color = method)) +
      ggplot2::geom_point() +
      ggplot2::geom_line() +
      ggplot2::geom_hline(yintercept = 0.8, linetype = "dashed", color = "gray50") +
      ggplot2::theme_minimal() +
      ggplot2::labs(
        title = "Power Analysis for Dose-Response Tests",
        x = "Dose Level",
        y = "Statistical Power",
        color = "Test Method"
      )
    
    if (arrange_by == "method") {
      power_plot <- power_plot + ggplot2::facet_wrap(~ method)
    } else {
      power_plot <- power_plot + ggplot2::facet_wrap(~ dose_level)
    }
  }
  
  if (plot_type == "estimates" || plot_type == "both") {
    # Create estimates plot
    estimates_plot <- ggplot2::ggplot(power_results, 
                                     ggplot2::aes(x = dose_level, y = mean_estimate, color = method)) +
      ggplot2::geom_point() +
      ggplot2::geom_errorbar(ggplot2::aes(ymin = mean_estimate - sd_estimate, 
                                         ymax = mean_estimate + sd_estimate), width = 0.2) +
      ggplot2::theme_minimal() +
      ggplot2::labs(
        title = "Effect Estimates for Dose-Response Tests",
        x = "Dose Level",
        y = "Mean Effect Estimate",
        color = "Test Method"
      )
    
    if (arrange_by == "method") {
      estimates_plot <- estimates_plot + ggplot2::facet_wrap(~ method)
    } else {
      estimates_plot <- estimates_plot + ggplot2::facet_wrap(~ dose_level)
    }
  }
  
  # Return appropriate plot(s)
  if (plot_type == "power") {
    return(power_plot)
  } else if (plot_type == "estimates") {
    return(estimates_plot)
  } else {
    return(list(power = power_plot, estimates = estimates_plot))
  }
}
```

Now let's create a simple example to demonstrate how these functions work together:

```{r}
#' @examples
#' # Define a dose-response function with a threshold effect at dose 5
#' threshold_response <- function(dose, threshold = 5, effect_size = 20) {
#'   ifelse(dose > threshold, effect_size, 0)
#' }
#' 
#' # Run a small power analysis
#' power_results <- power_analysis_dose_response(
#'   n_sims = 50,
#'   n_doses = 5,
#'   dose_range = c(0, 10),
#'   m_tanks = 3,
#'   k_individuals = 8,
#'   var_tank = 5,
#'   var_individual = 2,
#'   response_function = threshold_response,
#'   threshold = 5,
#'   effect_size = 15,
#'   methods = c("Dunnett_multcomp", "Williams_PMCMRplus", "stepDown_PMCMR")
#' )
#' 
#' # Visualize the results
#' visualize_power_analysis(power_results, plot_type = "both")
```

These functions should provide a solid foundation for your dose-response analysis package. The `combine_multiple_comparisons` function integrates the results from various testing approaches, and the `power_analysis_dose_response` function allows you to compare the statistical power of these methods through simulation.

Let me know if you'd like me to modify any aspects of these functions or if you need additional functionality!












## Simulate Data

```{r}
# Let's simulate a single dataset with your existing function and examine its properties
set.seed(123)

# Simulate dose-response data with specific variance components
sim_data <- simulate_dose_response(
  n_doses = 5,
  dose_range = c(0, 20),
  m_tanks = 4,
  k_individuals = 10,
  var_tank = 6,     # Between-tank variance
  var_individual = 2,  # Within-tank (individual) variance
  include_individuals = TRUE,
  response_function = function(dose) {
    # Simple linear dose-response with threshold at dose 10
    ifelse(dose > 10, 5 + 2 * (dose - 10), 5)
  }
)

# Calculate theoretical ICC
theoretical_icc <- 6 / (6 + 2)  # var_tank / (var_tank + var_individual)
cat("Theoretical ICC:", theoretical_icc, "\n")

# Examine the data structure
head(sim_data)
str(sim_data)

# Visualize the data to see the hierarchical structure
library(ggplot2)

# Plot individual data points with tank means
ggplot(sim_data, aes(x = factor(Dose), y = Response, color = factor(Tank))) +
  geom_jitter(width = 0.2, alpha = 0.5) +
  stat_summary(fun = mean, geom = "point", size = 3) +
  stat_summary(fun = mean, geom = "line", aes(group = factor(Tank))) +
  labs(title = "Dose-Response Data with Hierarchical Structure",
       x = "Dose", y = "Response",
       color = "Tank") +
  theme_minimal()

# Calculate observed ICC using a mixed model
library(lme4)
mixed_model <- lmer(Response ~ factor(Dose) + (1|Tank), data = sim_data)
summary(mixed_model)

# Extract variance components
vc <- VarCorr(mixed_model)
tank_var <- as.numeric(vc$Tank)
residual_var <- attr(vc, "sc")^2
observed_icc <- tank_var / (tank_var + residual_var)
cat("Observed ICC:", observed_icc, "\n")

# Aggregate data to tank level
tank_data <- aggregate(Response ~ Dose + Tank, data = sim_data, FUN = mean)
head(tank_data)

# Compare individual-level model with tank-level model
# Individual level (mixed model)
ind_model <- lmer(Response ~ factor(Dose) + (1|Tank), data = sim_data)

# Tank level (regular linear model)
tank_model <- lm(Response ~ factor(Dose), data = tank_data)

# Compare model summaries
summary(ind_model)
summary(tank_model)

# Extract and compare fixed effects
ind_fixed <- fixef(ind_model)
tank_fixed <- coef(tank_model)
```



Great, let's use the `multcomp` package to perform Dunnett tests on both the individual-level mixed model (`ind_model`) and the tank-level linear model (`tank_model`). I'll extract the results in a standardized format for comparison.

```{r}
library(multcomp)


ind_model1 <- lmer(Response ~ Treatment + (1 | Tank),sim_data) ## homoscedastic errors
# Apply Dunnett test to mixed model
ind_dunnett1 <- glht(ind_model1, linfct = mcp(Treatment = "Dunnett"))

summary(ind_dunnett) ## Note in this case all Std. Error are the same. 
library(nlme)
gls0 <- gls(Response ~ Treatment, data=sim_data,weights=varIdent(form= ~1|Treatment))
ind_gls0 <- glht(gls0, linfct = mcp(Treatment = "Dunnett"))
mod.nlme <- nlme::lme(Response ~ Treatment ,  
                       random  = ~ 1 | Tank, 
                       weights = varIdent(form= ~1|Treatment),
                       data    = sim_data)
ind_dunnett2 <- glht(mod.nlme, linfct = mcp(Treatment = "Dunnett"))
summary(ind_dunnett2)   ## Note that standard errors are different for different comparisons.
# 1. Homoscedastic mixed model (equivalent to your ind_model1)
result1 <- dunnett_test(
  data = sim_data,
  response_var = "Response",
  dose_var = "Treatment",  # Using your Treatment factor
  block_var = "Tank",
  include_random_effect = TRUE,
  variance_structure = "homoscedastic"
)
s1 <- summary(ind_dunnett1)
result1$results_table$p.value - s1$test$pvalues < attr(result1$results_table$p.value,"error")
# 2. Heteroscedastic mixed model (equivalent to your mod.nlme)
result2 <- dunnett_test(
  data = sim_data,
  response_var = "Response",
  dose_var = "Treatment",
  block_var = "Tank",
  include_random_effect = TRUE,
  variance_structure = "heteroscedastic"
)
s2 <- summary(ind_dunnett2)
result2$results_table$p.value - s2$test$pvalues < 1e-05
result2$results_table$estimate -s2$test$coefficients

result3 <- dunnett_test(
  data = sim_data,
  response_var = "Response",
  dose_var = "Treatment",
  block_var = "Tank",
  include_random_effect = FALSE,
  variance_structure = "heteroscedastic"
)
s3 <- summary(ind_gls0)
result3$results_table$estimate -s3$test$coefficients

plot(gls0,Treatment ~ fitted(.))
plot(mod.nlme,Treatment ~ fitted(.))
ind_results <- extract_dunnett_results(ind_dunnett1, "Individual-level Mixed Model")

# Apply Dunnett test to tank-level model
tank_dunnett <- glht(tank_model, linfct = mcp(factor(Dose) = dunnett_contrasts))
tank_results <- extract_dunnett_results(tank_dunnett, "Tank-level Linear Model")

# Combine results for comparison
all_results <- rbind(ind_results, tank_results)
print(all_results)

# Calculate differences in p-values and estimates between models
comparison_summary <- merge(
  ind_results[, c("comparison", "estimate", "p.value")],
  tank_results[, c("comparison", "estimate", "p.value")],
  by = "comparison",
  suffixes = c(".ind", ".tank")
)

comparison_summary$diff_estimate <- comparison_summary$estimate.ind - comparison_summary$estimate.tank
comparison_summary$ratio_pvalue <- comparison_summary$p.value.ind / comparison_summary$p.value.tank

print(comparison_summary)

# Visualize the comparison
library(ggplot2)

# Plot estimates
ggplot(all_results, aes(x = comparison, y = estimate, color = model)) +
  geom_point(position = position_dodge(width = 0.3), size = 3) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), 
                position = position_dodge(width = 0.3), width = 0.2) +
  labs(title = "Comparison of Dunnett Test Estimates",
       x = "Comparison", y = "Estimate") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Plot p-values
ggplot(all_results, aes(x = comparison, y = p.value, color = model)) +
  geom_point(position = position_dodge(width = 0.3), size = 3) +
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "red") +
  scale_y_log10() +
  labs(title = "Comparison of Dunnett Test p-values",
       x = "Comparison", y = "p-value (log scale)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

Now, let's explore how different variance structures affect the ICC and model results. I'll create a function to simulate data with various variance components and analyze the results:

```{r}
# Function to analyze the effect of variance structure on ICC and model results
analyze_variance_structure <- function(var_tank_values, var_ind_values, n_doses = 5, 
                                      m_tanks = 4, k_individuals = 10) {
  
  results <- list()
  
  for (vt in var_tank_values) {
    for (vi in var_ind_values) {
      # Set seed for reproducibility
      set.seed(123)
      
      # Calculate theoretical ICC
      theoretical_icc <- vt / (vt + vi)
      
      # Simulate data
      sim_data <- simulate_dose_response(
        n_doses = n_doses,
        dose_range = c(0, 20),
        m_tanks = m_tanks,
        k_individuals = k_individuals,
        var_tank = vt,
        var_individual = vi,
        include_individuals = TRUE,
        response_function = function(dose) {
          # Simple linear dose-response with threshold at dose 10
          ifelse(dose > 10, 5 + 2 * (dose - 10), 5)
        }
      )
      
      # Fit models
      ind_model <- lmer(Response ~ factor(Dose) + (1|Tank), data = sim_data)
      
      # Aggregate data to tank level
      tank_data <- aggregate(Response ~ Dose + Tank, data = sim_data, FUN = mean)
      tank_model <- lm(Response ~ factor(Dose), data = tank_data)
      
      # Calculate observed ICC
      vc <- VarCorr(ind_model)
      observed_tank_var <- as.numeric(vc$Tank)
      observed_residual_var <- attr(vc, "sc")^2
      observed_icc <- observed_tank_var / (observed_tank_var + observed_residual_var)
      
      # Perform Dunnett tests
      dose_levels <- levels(factor(sim_data$Dose))
      dunnett_contrasts <- contrMat(n = length(dose_levels), type = "Dunnett")
      
      ind_dunnett <- glht(ind_model, linfct = mcp(factor(Dose) = dunnett_contrasts))
      tank_dunnett <- glht(tank_model, linfct = mcp(factor(Dose) = dunnett_contrasts))
      
      ind_results <- extract_dunnett_results(ind_dunnett, "Individual-level")
      tank_results <- extract_dunnett_results(tank_dunnett, "Tank-level")
      
      # Store results
      result_entry <- list(
        var_tank = vt,
        var_ind = vi,
        theoretical_icc = theoretical_icc,
        observed_icc = observed_icc,
        observed_tank_var = observed_tank_var,
        observed_residual_var = observed_residual_var,
        ind_model_summary = summary(ind_model),
        tank_model_summary = summary(tank_model),
        ind_dunnett_results = ind_results,
        tank_dunnett_results = tank_results
      )
      
      results[[paste(vt, vi, sep = "_")]] <- result_entry
    }
  }
  
  return(results)
}

# Define variance values to explore
var_tank_values <- c(1, 4, 10)
var_ind_values <- c(1, 4, 10)

# Run the analysis
variance_analysis <- analyze_variance_structure(var_tank_values, var_ind_values)

# Extract key metrics for comparison
comparison_df <- data.frame(
  var_tank = numeric(),
  var_ind = numeric(),
  theoretical_icc = numeric(),
  observed_icc = numeric(),
  ind_model_dose5_p = numeric(),
  tank_model_dose5_p = numeric(),
  ind_model_r2 = numeric(),
  tank_model_r2 = numeric()
)

for (name in names(variance_analysis)) {
  result <- variance_analysis[[name]]
  
  # Extract p-value for the highest dose comparison (dose 5 vs control)
  ind_dose5_p <- result$ind_dunnett_results$p.value[length(result$ind_dunnett_results$p.value)]
  tank_dose5_p <- result$tank_dunnett_results$p.value[length(result$tank_dunnett_results$p.value)]
  
  # Extract R-squared values
  ind_r2 <- r.squaredGLMM(result$ind_model_summary)[1]  # Marginal R-squared
  tank_r2 <- summary(result$tank_model_summary)$r.squared
  
  comparison_df <- rbind(comparison_df, data.frame(
    var_tank = result$var_tank,
    var_ind = result$var_ind,
    theoretical_icc = result$theoretical_icc,
    observed_icc = result$observed_icc,
    ind_model_dose5_p = ind_dose5_p,
    tank_model_dose5_p = tank_dose5_p,
    ind_model_r2 = ind_r2,
    tank_model_r2 = tank_r2
  ))
}

# Print the comparison table
print(comparison_df)

# Visualize the relationship between ICC and model performance
ggplot(comparison_df, aes(x = theoretical_icc)) +
  geom_point(aes(y = ind_model_dose5_p, color = "Individual-level p-value"), size = 3) +
  geom_point(aes(y = tank_model_dose5_p, color = "Tank-level p-value"), size = 3) +
  geom_line(aes(y = ind_model_dose5_p, color = "Individual-level p-value")) +
  geom_line(aes(y = tank_model_dose5_p, color = "Tank-level p-value")) +
  scale_y_log10() +
  labs(title = "Effect of ICC on p-values",
       x = "Intraclass Correlation Coefficient (ICC)",
       y = "p-value (log scale)",
       color = "Model") +
  theme_minimal()

# Visualize the relationship between ICC and R-squared
ggplot(comparison_df, aes(x = theoretical_icc)) +
  geom_point(aes(y = ind_model_r2, color = "Individual-level R²"), size = 3) +
  geom_point(aes(y = tank_model_r2, color = "Tank-level R²"), size = 3) +
  geom_line(aes(y = ind_model_r2, color = "Individual-level R²")) +
  geom_line(aes(y = tank_model_r2, color = "Tank-level R²")) +
  labs(title = "Effect of ICC on Model Fit",
       x = "Intraclass Correlation Coefficient (ICC)",
       y = "R-squared",
       color = "Model") +
  theme_minimal()
```

This code will:
1. First perform Dunnett tests on our original simulated data using both individual-level mixed model and tank-level linear model
2. Then explore how different variance structures affect the ICC and model results
3. Compare p-values and model fit (R-squared) between individual-level and tank-level models across different ICC values

Would you like me to focus on any specific aspect of this analysis, or would you like me to explain the expected patterns we might observe?

## References

- The Abuse of Power: https://www.tandfonline.com/doi/abs/10.1198/000313001300339897#preview
- SIMR: power analysis for GLMM https://besjournals.onlinelibrary.wiley.com/doi/10.1111/2041-210X.12504
