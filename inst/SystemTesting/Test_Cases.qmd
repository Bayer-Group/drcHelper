---
format:
  docx:
    toc: true
    colorlinks: true
    fig-width: 7
    fig-height: 7
execute: 
  echo: true
knitr:
  opts_chunk:
    fig.path: figures/
    warning: false
    message: false
date: "`r Sys.Date()`"
date-format: long
bibliography: references.bib
---

## Definition of Test Cases

In addition to unit testing for important functions, we are also verifying if the selected R functions for a particular purpose. The functions, data, and expected results are listed in the `inst/SystemTesting/Verify_R_FS`. Expe

Test cases and expected results are stored in the excel file "R-V-Cop_test_cases_level_2_redact.xlsx" in the raw-data folder. The compound or study related information are redacted and it will not affect the numerical evaluation or verification. 

The data included in the test cases are either real data excluding the compound or chemical information or synthetic data generated to cover a special case. Most of the data are repeatedly used in the verification or validation of different tools for the statistical analyses of (eco)toxicology data. 

Here we validated or verified a set of functions, it is not to say other functions in other packages are wrong or inaccurate, they are just not to be used in the defined GLP settings. 


```{r setup0, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, results = "asis",eval=FALSE)
library(dplyr)

SummariseResults <- function(res) {
  res %>% summarise_if(is.numeric, sum) %>% knitr::kable()
}
WriteResults <- function(res) {
  purrr::pwalk(list(res$file, res$Categories), WriteFileResults)
}
WriteFileResults <- function(file, categories, ...) {
  cat("###", file, "\n")
  purrr::pwalk(list(categories$context, categories$Results), WriteCategoryResults)
}
WriteCategoryResults <- function(category, tests, ...) {
  cat("####", category, "\n")
  print(knitr::kable(tests))
}

path0 <- here::here()
devtools::load_all(paste0(path0))
```

## Testing R avaliable functions

In this set of testing, the functions are available in other CRAN or GitHub packages and are tested against expected outputs from the development support document. The results were checked first manually and the snapshots were then saved into the `_snaps` subfolder. The subsequent test runs are then checked against those validated sanpshots. 

There are often multiple functions available in R for perfoming the same calculation or analysis. In some cases we tested a few functions in one testing context. 

For example, to perform a Wiliams' test, the function `williamsTest_JG` from this **drcHelper** package, which is extracted from the **statCharrms** as the library is not available from R CRAN. 

The function `DunnettTest` from the library `DescTools` is calculating correct results for the `two.sided` direction. The function `dunnettTest` from the library **PMCMRplus** can be used to calculate the test options `less` (smaller), `greater` and `two.sided`. The results for the `two.sided` option differ in some cases from the results of `DunnettTest` from the library `DescTools`. The function `glht` from the library **multcomp** can be used to perform Dunnett's test with two.sided, less or greater as the alternative hypothesis, which resulted in the same results as the function `DunnettTest` from the library **DescTools**. 



```{r GenerateResults,results='hide',message=FALSE,warning=FALSE,fig.keep='none',include=FALSE}

file_lists <- c("ST_TestCase3.1.R","ST_TestCase3.2.R","ST_TestCase3.3.R")
file_lists <- list.files(paste0("path0","/inst/SystemTesting/Verify_R_FS"))
if("_snaps" %in% file_lists) {file_lists <- file_lists[file_lists!="_snaps"]}
testResultsRaw_list <- lapply(file_lists,function(x)testthat::test_file(paste0(path0,"/inst/SystemTesting/Verify_R_FS/",x), reporter = testthat::ListReporter))

testResultsIndividual_list <- lapply(testResultsRaw_list,function(x) x%>%
  as_tibble() %>%
  rename(Test = test) %>%
  group_by(file, context, Test) %>%
  summarise(NumTests = first(nb),
            Passed   = sum(passed),
            Failed   = sum(failed),
            Warnings = sum(warning),
            Errors   = sum(as.numeric(error)),
            Skipped  = sum(as.numeric(skipped)),
            .groups = "drop"))
testResultsIndividual<- plyr::ldply(testResultsIndividual_list)##%>%dplyr::select(-context)
testResultsNested <- testResultsIndividual %>%
  nest_by(file, context, .key = "Results") %>%
  nest_by(file, .key = "Categories")
```

```{r resetup,include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, results = "asis")
options(knitr.table.format = "pipe")
```

## Summary
```{r WriteSummary, results = "asis"}
SummariseResults(testResultsIndividual)
```

## Details
```{r WriteResults, results = "asis"}
WriteResults(testResultsNested)
## knitr::kable(testResultsIndividual)
```

```{r eval=FALSE,include=FALSE}
path0 <- here::here()
zz <- file(paste0(path0,"/inst/SystemTests/SmokeTests/TC3.3.console.txt"), open="wt")
sink(zz,  split=TRUE)
tmp <- test_file(paste0(path0,"/inst/SystemTests/SmokeTests/","ST_TestCase3.3.R"),reporter = testthat::ListReporter)
```








## Appendix: Tests Outputs



```{r results='hold',message=FALSE,warning=FALSE,fig.show='hold'}
#file_lists <- list.files(paste0("path0","/inst/SystemTests/SmokeTests"))
##file_lists <- c("ST_TestCase3.1.R","ST_TestCase3.2.R","ST_TestCase3.3.R")
file_lists <- c("ST_TestCase3.1.R","ST_TestCase3.2.R")
testResultsRaw_list <- lapply(file_lists,function(x)testthat::test_file(paste0(path0,"/inst/SystemTests/SmokeTests/",x), reporter = testthat::ListReporter))
```



```{r}

```


```{r}

```

All models are wrong, but some are useful" is a common aphorism  [@Box1976].

# References

::: {#refs}
:::
